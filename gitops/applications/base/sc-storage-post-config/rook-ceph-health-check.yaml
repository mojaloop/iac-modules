apiVersion: batch/v1
kind: Job
metadata:
  name: check-ceph-cluster-health
  namespace: ${ARGOCD_ENV_storage_namespace}
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd.argoproj.io/sync-wave: '-11'  # Same wave as post-config
spec:
  template:
    spec:
      containers:
      - name: check-ceph-cluster-health
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |

          set -e
          INTERVAL=10
          TIMEOUT=300

          check_cephcluster() {
            echo "üîç Checking CephCluster..."
            SECONDS=0
            until kubectl get cephcluster -n rook-ceph rook-ceph -o jsonpath='{.status.ceph.health}' 2>/dev/null | grep -q "HEALTH_OK"; do
              if [ $SECONDS -ge $TIMEOUT ]; then
                echo "‚ùå Timeout waiting for CephCluster"
                exit 1
              fi
              echo "‚è≥ CephCluster not healthy yet..."
              sleep $INTERVAL
            done
            echo "‚úÖ CephCluster is HEALTH_OK"
          }

          check_blockpool() {
            echo "üîç Checking CephBlockPool..."
            SECONDS=0
            until kubectl get cephblockpool -n rook-ceph ceph-blockpool -o jsonpath='{.status.phase}' 2>/dev/null | grep -q "Ready"; do
              if [ $SECONDS -ge $TIMEOUT ]; then
                echo "‚ùå Timeout waiting for CephBlockPool"
                exit 1
              fi
              echo "‚è≥ CephBlockPool not ready yet..."
              sleep $INTERVAL
            done
            echo "‚úÖ CephBlockPool is Ready"
          }

          check_objectstore() {
            echo "üîç Checking CephObjectStore..."
            SECONDS=0
            until kubectl get cephobjectstore -n rook-ceph default -o jsonpath='{.status.phase}' 2>/dev/null | grep -q "Ready"; do
              if [ $SECONDS -ge $TIMEOUT ]; then
                echo "‚ùå Timeout waiting for CephObjectStore"
                exit 1
              fi
              echo "‚è≥ CephObjectStore not ready yet..."
              sleep $INTERVAL
            done
            echo "‚úÖ CephObjectStore is Ready"
          }

          # Run checks in background
          check_cephcluster &
          PID1=$!
          check_blockpool &
          PID2=$!
          check_objectstore &
          PID3=$!

          # Wait for all to finish
          wait $PID1
          wait $PID2
          wait $PID3

          echo "‚úÖ All Ceph components are ready"
          # # Wait for the Ceph cluster to be healthy
          # until kubectl get cephcluster -n ${ARGOCD_ENV_storage_namespace} ${ARGOCD_ENV_storage_namespace} -o jsonpath='{.status.ceph.health}' | grep -q 'HEALTH_OK'; do
          #   echo "Waiting for Ceph cluster to be healthy..."
          #   sleep 30
          # done
          # # Wait for the cephblockpoolto be healthy
          # until kubectl get cephblockpool -n ${ARGOCD_ENV_storage_namespace} ceph-blockpool -o jsonpath='{.status.phase}' | grep -q 'Ready'; do
          #   echo "CephBlockPool not yet ready, waiting..."
          #   sleep 30
          # done
          # # Wait for the cephobjectstore be healthy
          # until kubectl get cephobjectstore -n ${ARGOCD_ENV_storage_namespace} default -o jsonpath='{.status.phase}' | grep -q 'Ready'; do
          #   echo "CephObjectStore not yet ready, waiting..."
          #   sleep 30
          # done
      restartPolicy: OnFailure
      serviceAccountName: ceph-job-sa
  backoffLimit: 5
  ttlSecondsAfterFinished: 100