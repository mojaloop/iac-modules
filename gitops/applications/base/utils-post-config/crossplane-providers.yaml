apiVersion: pkg.crossplane.io/v1alpha1
kind: ControllerConfig
metadata:
  name: debug-config
spec:
  args:
    - --debug
---
apiVersion: pkg.crossplane.io/v1alpha1
kind: ControllerConfig
metadata:
  name: terraform-debug
  labels:
    app: crossplane-provider-terraform
spec:
  args:
    - -d
    - --poll=5m
---
apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: provider-terraform
spec:
  package: xpkg.upbound.io/upbound/provider-terraform:v${ARGOCD_ENV_terraform_crossplane_modules_version}
  controllerConfigRef:
    name: terraform-debug
  runtimeConfigRef:
    name: provider-terraform-config
---
apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: provider-vault
spec:
  package: xpkg.upbound.io/upbound/provider-vault:v${ARGOCD_ENV_vault_crossplane_modules_version}
  controllerConfigRef:
    name: debug-config
---
apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: provider-ansible
spec:
  package: xpkg.upbound.io/crossplane-contrib/provider-ansible:v${ARGOCD_ENV_ansible_crossplane_modules_version}
  controllerConfigRef:
    name: debug-config
  runtimeConfigRef:
    name: provider-ansible-config
---
apiVersion: pkg.crossplane.io/v1beta1
kind: DeploymentRuntimeConfig
metadata:
  name: provider-ansible-config
spec:
  deploymentTemplate:
    spec:
      selector: {}
      template:
        spec:
          containers:
            - name: package-runtime
              command:
                - /usr/bin/dumb-init
                - sh
                - -c
                - /usr/local/bin/pip install kubernetes && exec "$@"
                - --
                - crossplane-ansible-provider
---
apiVersion: pkg.crossplane.io/v1beta1
kind: DeploymentRuntimeConfig
metadata:
  name: provider-terraform-config
spec:
  deploymentTemplate:
    spec:
      selector: {}
      template:
        spec:
          dnsConfig:
            options:
              - name: ndots
                value: "3"
              - name: attempts
                value: "5"
          volumes:
            - emptyDir: {}
              name: additional
          initContainers:
            - name: configure-zitadel-provider
              image: golang:1.20-alpine3.18
              securityContext:
                runAsUser: 0
                privileged: true
                runAsNonRoot: false
              command: [sh, -c]
              args:
                [
                  "apk add git && git clone https://github.com/mojaloop/terraform-provider-zitadel && cd terraform-provider-zitadel && git checkout feature/add-user-grant-datasource && go build . && mkdir -p /tmp/config/registry.terraform.io/zitadel/zitadel/99.99.99/linux_amd64 && cp terraform-provider-zitadel /tmp/config/registry.terraform.io/zitadel/zitadel/99.99.99/linux_amd64 && chmod +rwx /tmp/config/registry.terraform.io/zitadel/zitadel/99.99.99/linux_amd64/terraform-provider-zitadel",
                ]
              volumeMounts:
                - mountPath: /tmp/config
                  name: additional
            - name: configure-netbird-provider
              image: golang:1.20-alpine3.18
              securityContext:
                runAsUser: 0
                privileged: true
                runAsNonRoot: false
              command: [sh, -c]
              args:
                [
                  "apk add git && git clone https://github.com/mojaloop/terraform-provider-netbird && cd terraform-provider-netbird && git checkout dev && go build . && mkdir -p /tmp/config/github.com/netbirdio/netbird/99.99.99/linux_amd64 && cp terraform-provider-netbird /tmp/config/github.com/netbirdio/netbird/99.99.99/linux_amd64/  && chmod +rwx /tmp/config/github.com/netbirdio/netbird/99.99.99/linux_amd64/terraform-provider-netbird",
                ]
              volumeMounts:
                - mountPath: /tmp/config
                  name: additional
          containers:
            - name: package-runtime
              volumeMounts:
                - mountPath: /tmp/config
                  name: additional
  serviceAccountTemplate:
    metadata:
      name: crossplane-terraform-sa
---
apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: provider-aws
spec:
  package: xpkg.upbound.io/crossplane-contrib/provider-aws:v${ARGOCD_ENV_aws_crossplane_module_version}
---
apiVersion: pkg.crossplane.io/v1beta1
kind: Function
metadata:
  name: function-patch-and-transform
spec:
  package: xpkg.upbound.io/crossplane-contrib/function-patch-and-transform:v${ARGOCD_ENV_crossplane_func_pat_version}
---
apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: provider-kubernetes
spec:
  package: xpkg.upbound.io/crossplane-contrib/provider-kubernetes:v${ARGOCD_ENV_k8s_crossplane_module_version}
  runtimeConfigRef:
    apiVersion: pkg.crossplane.io/v1beta1
    kind: DeploymentRuntimeConfig
    name: provider-kubernetes
---
apiVersion: pkg.crossplane.io/v1beta1
kind: Function
metadata:
  name: function-go-templating
spec:
  package: xpkg.upbound.io/crossplane-contrib/function-go-templating:v${ARGOCD_ENV_crossplane_func_go_templating_version}