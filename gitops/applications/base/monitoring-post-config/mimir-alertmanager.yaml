apiVersion: redhatcop.redhat.io/v1alpha1
kind: PasswordPolicy
metadata:
  name: alertmanager-bootstrap-password-policy
  namespace: ${ARGOCD_ENV_vault_namespace}
spec:
  authentication:
    path: ${ARGOCD_ENV_vault_k8s_admin_auth_path}
    role: ${ARGOCD_ENV_vault_k8s_admin_role_name}
    serviceAccount:
      name: default
  passwordPolicy: |
    length = 5
      rule "charset" {
        charset = "-"
        min-chars = 1
      }
---
# NOTE: the secret generated by RandomSecret resources in this file are not used as is. 
# Rather they are meant to be updated by a human in vault manually. This is because we can not 
# automate fetching jira and slack alert notifications secrets. 
apiVersion: redhatcop.redhat.io/v1alpha1
kind: RandomSecret
metadata:
  name: slack-alerts
  namespace: ${ARGOCD_ENV_vault_namespace}
spec:
  authentication:
    path: ${ARGOCD_ENV_vault_k8s_admin_auth_path}
    role: ${ARGOCD_ENV_vault_k8s_admin_role_name}
    serviceAccount:
      name: default
  isKVSecretsEngineV2: true
  path: /secret/data/mimir/
  secretKey: webhook
  secretFormat:
    passwordPolicyName: alertmanager-bootstrap-password-policy
  # refreshPeriod: 0h # Keep it commented. We do not want the secret to be rotated by vault-config-operator
---
apiVersion: redhatcop.redhat.io/v1alpha1
kind: RandomSecret
metadata:
  name: jira-alerts
  namespace: ${ARGOCD_ENV_vault_namespace}
spec:
  authentication:
    path: ${ARGOCD_ENV_vault_k8s_admin_auth_path}
    role: ${ARGOCD_ENV_vault_k8s_admin_role_name}
    serviceAccount:
      name: default
  isKVSecretsEngineV2: true
  path: /secret/data/mimir/
  secretKey: api_key
  secretFormat:
    passwordPolicyName: alertmanager-bootstrap-password-policy
  # refreshPeriod: 0h # Keep it commented. We do not want the secret to be rotated by vault-config-operator
---
# NOTE: this resource produces mimir-alertmanager config secret 
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mimir-alertmanager-config
spec:
  refreshInterval: 1m

  secretStoreRef:
    kind: ClusterSecretStore
    name: vault-secret-store

  data:
    - secretKey: webhook
      remoteRef:
        key: mimir/slack-alerts
        property: webhook
    - secretKey: api_key
      remoteRef:
        key: mimir/jira-alerts
        property: api_key
  target:
    name: mimir-alertmanager-config
    creationPolicy: Owner
    template:
      data:
        config.yaml: |
          route:
            # Main alert routing configuration
            receiver: ${ARGOCD_ENV_mimir_alerts_notification_receiver}
            group_by: ['cluster', 'job', 'alertname']
            group_wait: 30s
            group_interval: 5m
            repeat_interval: 24h
          receivers:
            - name: 'blackhole'
            - name: 'slack'
              slack_configs:
                - api_url: {{.webhook}}
                  send_resolved: true
                  title: {{ `"[{{ .Status  }}] {{ .GroupLabels.cluster }} | {{ .GroupLabels.alertname }}"` }}
                  text: {{ `"{{ range .Alerts }}{{ .Annotations.summary }}\n{{ end }}"` }}
                  title_link: http://${ARGOCD_ENV_grafana_web_name}.${ARGOCD_ENV_grafana_dns_subdomain}/alerting/groups
            - name: 'jira'
              opsgenie_configs:
                - api_key: {{.api_key}}
                  send_resolved: true
                  # link to mimir alertmanager page in grafana
                  source: http://${ARGOCD_ENV_grafana_web_name}.${ARGOCD_ENV_grafana_dns_subdomain}/alerting/groups
                  # message field contains title
                  message: {{ `"[{{ .Status  }}] {{ .GroupLabels.cluster }} | {{ .GroupLabels.alertname }}"` }}
                  # description field contains the body
                  description: {{ `"
                    {{ range .Alerts }}
                    SUMMARY: {{ .Annotations.summary }} \n
                    DESCRIPTION: {{ .Annotations.description }}

                    {{ end }}
                    "` }}
---
