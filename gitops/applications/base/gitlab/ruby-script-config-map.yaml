apiVersion: v1
kind: ConfigMap
metadata:
  name: ruby-script
  namespace: ${ARGOCD_ENV_gitlab_namespace}
data:
  maketoken.rb: |
    user = User.where(id: 1).first
    token = user.personal_access_tokens.where(name: 'rootapitoken').first
    if token.nil?
        token = user.personal_access_tokens.create(scopes: [:api], name: 'rootapitoken', expires_at: ${ARGOCD_ENV_gitlab_token_ttl}.days.from_now)
        token.set_token(ENV["TOKEN_VALUE"])
    elsif token.expires_at < Time.now
        token.delete
        token = user.personal_access_tokens.create(scopes: [:api], name: 'rootapitoken', expires_at: ${ARGOCD_ENV_gitlab_token_ttl}.days.from_now)
        token.set_token(ENV["TOKEN_VALUE"])
    end
    token.save!
    user.save!
  rmdelayedprojectdelete.rb: |
    settings = ApplicationSetting.current
    unless settings.delayed_project_deletion?
      puts "delayed_project_deletion is already disabled (value: false). No changes made."
      exit 0
    end
    puts "Current delayed_project_deletion: #{settings.delayed_project_deletion}"
    puts "Updating delayed_project_deletion to false..."
    if settings.update(delayed_project_deletion: false)
      puts "Successfully disabled delayed_project_deletion"
      puts "New value: #{ApplicationSetting.current.delayed_project_deletion}"
    else
      puts "Failed to update: #{settings.errors.full_messages.join(', ')}"
      exit 1
    end
