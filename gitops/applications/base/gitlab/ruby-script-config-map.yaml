apiVersion: v1
kind: ConfigMap
metadata:
  name: ruby-script
  namespace: ${ARGOCD_ENV_gitlab_namespace}
data:
  maketoken.rb: |
    user = User.where(id: 1).first
    token = user.personal_access_tokens.where(name: 'rootapitoken').first
    if token.nil?
        token = user.personal_access_tokens.create(scopes: [:api], name: 'rootapitoken', expires_at: ${ARGOCD_ENV_gitlab_token_ttl}.days.from_now)
        token.set_token(ENV["TOKEN_VALUE"])
    elsif token.expires_at < Time.now
        token.delete
        token = user.personal_access_tokens.create(scopes: [:api], name: 'rootapitoken', expires_at: ${ARGOCD_ENV_gitlab_token_ttl}.days.from_now)
        token.set_token(ENV["TOKEN_VALUE"])
    end
    token.save!
    user.save!
  rmdelayedprojectdelete.rb: |
    settings = ApplicationSetting.current
    if settings.deletion_adjourned_period == 0
      puts "deletion_adjourned_period is already 0 (no change needed)"
      exit 0
    end
    puts "Current deletion_adjourned_period: #{settings.deletion_adjourned_period}"
    if settings.update(deletion_adjourned_period: 0)
      puts "Successfully updated deletion_adjourned_period to 0"
      puts "New value: #{ApplicationSetting.current.deletion_adjourned_period}"
    else
      puts "Failed to update settings: #{settings.errors.full_messages.join(', ')}"
      exit 1
    end
