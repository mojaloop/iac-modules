operator:
  resourcesPreset: small
  logLevel: debug
alertmanager:
  enabled: false
prometheus:
  persistence:
    enabled: true
    size: ${ARGOCD_ENV_prometheus_pvc_size}
  retention: ${ARGOCD_ENV_prometheus_retention_period}
  # setting these to prevent oom issue https://github.com/prometheus/prometheus/issues/6934#issuecomment-1099293120
  disableCompaction: false #this is the default anyway
  additionalArgs:
    - name: storage.tsdb.min-block-duration
      value: ${ARGOCD_ENV_tsdb_min_block_duration}
    - name: storage.tsdb.max-block-duration
      value: ${ARGOCD_ENV_tsdb_max_block_duration}
  externalLabels:
    cluster: ${ARGOCD_ENV_cluster_label_value}
  resourcesPreset: ${ARGOCD_ENV_resources_preset_bitnami}
  remoteWrite:
    - name: central-monitoring
      url: http://central-monitoring-grafana-mimir-gateway/api/v1/push
      headers:
        X-Scope-OrgID: ${ARGOCD_ENV_remote_write_tenant_id}
  remoteRead:
    - name: central-monitoring
      url: http://central-monitoring-grafana-mimir-gateway/prometheus/api/v1/read
      headers:
        X-Scope-OrgID: ${ARGOCD_ENV_remote_write_tenant_id}

kubelet:
  serviceMonitor:
    # interval: 60s
    relabelings:
      # adds kubernetes_io_hostname label being used by k8s monitoring dashboard
      - sourceLabels: [node]
        separator: ;
        regex: (.*)
        targetLabel: kubernetes_io_hostname
        replacement: "${1}"
        action: replace


node-exporter:
  serviceMonitor:
    # interval: 60s
    relabelings:
      - sourceLabels: [__meta_kubernetes_pod_node_name]
        targetLabel: nodename
      - sourceLabels: [nodename]
        separator: ;
        regex: (.*)
        targetLabel: instance
        replacement: "${1}"
        action: replace
  tolerations:
    - operator: "Exists"
blackboxExporter:
  enabled: false
