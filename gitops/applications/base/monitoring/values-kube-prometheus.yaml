operator:
  resourcesPreset: small
  logLevel: debug
alertmanager:
  enabled: false
prometheus:
  scrapeInterval: ${ARGOCD_ENV_prometheus_scrape_interval}
  persistence:
    enabled: true
    size: ${ARGOCD_ENV_prometheus_pvc_size}
  retention: ${ARGOCD_ENV_prometheus_retention_period}
  # setting these to prevent oom issue https://github.com/prometheus/prometheus/issues/6934#issuecomment-1099293120
  disableCompaction: false #this is the default anyway
  additionalArgs:
    - name: storage.tsdb.min-block-duration
      value: ${ARGOCD_ENV_tsdb_min_block_duration}
    - name: storage.tsdb.max-block-duration
      value: ${ARGOCD_ENV_tsdb_max_block_duration}
  externalLabels:
    cluster: ${ARGOCD_ENV_cluster_label_value}
  resourcesPreset: ${ARGOCD_ENV_resources_preset_bitnami}
  remoteWrite:
    - name: central-monitoring
      url: http://central-monitoring-grafana-mimir-gateway/api/v1/push
      headers:
        X-Scope-OrgID: ${ARGOCD_ENV_remote_write_tenant_id}
      metadataConfig:
        sendInterval: ${ARGOCD_ENV_prometheus_scrape_interval}
  remoteRead:
    - name: central-monitoring
      url: http://central-monitoring-grafana-mimir-gateway/prometheus/api/v1/read
      headers:
        X-Scope-OrgID: ${ARGOCD_ENV_remote_write_tenant_id}


kubelet:
  serviceMonitor:
    relabelings:
      # adds kubernetes_io_hostname label being used by k8s monitoring dashboard
      - sourceLabels: [node]
        separator: ;
        regex: (.*)
        targetLabel: kubernetes_io_hostname
        replacement: "${1}"
        action: replace
    metricRelabelings:
    - sourceLabels: ['__name__']
      regex: 'apiserver_request_duration_seconds_bucket|apiserver_request_sli_duration_seconds_bucket'
      action: drop
    - sourceLabels: ['__name__']
      regex: 'apiserver_request_body_size_bytes_bucket|apiserver_response_sizes_bucket'
      action: drop
    - sourceLabels: ['__name__']
      regex: 'etcd_request_duration_seconds_bucket|apiserver_watch_events_sizes_bucket'
      action: drop
    - sourceLabels: ['__name__']
      regex: 'apiserver_watch_cache_read_wait_seconds_bucket'
      action: drop
    - regex: endpoint|service
      action: labeldrop
    cAdvisorMetricRelabelings:
    - sourceLabels: ['__name__']
      regex: 'container_tasks_state|container_memory_failures_total|container_blkio_device_usage_total'
      action: drop
    - regex: endpoint|service
      action: labeldrop
    # remove name label with hexadecimal values only
    - sourceLabels: [name]
      regex: '^[a-f0-9]{64}$'
      targetLabel: name
      replacement: ''
      action: replace
    # removing id entirely make ambiguous series
    - sourceLabels: [id]
      regex: '.+/pod.+'
      targetLabel: id
      replacement: ''
      action: replace

kubeApiServer:
  enabled: false

kube-state-metrics:
  serviceMonitor:
    relabelings:
    # NOTE: there are valid endpoint and service labels. Therefore, labeldrop can not be used.
    - sourceLabels: [endpoint]
      regex: http
      targetLabel: endpoint
      replacement: ''
      action: replace
    - sourceLabels: [service]
      regex: prom-kube-state-metrics
      targetLabel: service
      replacement: ''
      action: replace
    metricRelabelings:
    - regex: container_id|uid
      action: labeldrop


node-exporter:
  serviceMonitor:
    relabelings:
      - sourceLabels: [__meta_kubernetes_pod_node_name]
        targetLabel: nodename
      - sourceLabels: [nodename]
        separator: ;
        regex: (.*)
        targetLabel: instance
        replacement: "${1}"
        action: replace
      - regex: endpoint|service
        action: labeldrop
  tolerations:
    - operator: "Exists"
blackboxExporter:
  enabled: false
