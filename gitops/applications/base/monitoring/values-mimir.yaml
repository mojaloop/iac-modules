minio:
  enabled: false

mimir:
  overrideConfiguration:
    frontend:
      max_outstanding_per_tenant: 4096
    ingester:
      ring:
        replication_factor: ${ARGOCD_ENV_mimir_ingester_replication_factor}
    blocks_storage:
      tsdb:
        block_ranges_period:
        - 1h
    compactor:
      deletion_delay: ${ARGOCD_ENV_mimir_compactor_deletion_delay}
    ruler:
      alertmanager_url: http://central-monitoring-grafana-mimir-gateway/alertmanager
    limits:
      max_global_series_per_user: ${ARGOCD_ENV_mimir_max_global_series_per_user}
      ingestion_rate: ${ARGOCD_ENV_mimir_ingestion_rate}
      ingestion_burst_size: ${ARGOCD_ENV_mimir_ingestion_burst_size}
      compactor_blocks_retention_period: ${ARGOCD_ENV_mimir_retention_period}
      max_label_names_per_series: ${ARGOCD_ENV_mimir_max_label_names_per_series}
    common:
      storage:
        backend: s3
        s3:
          access_key_id: $${username}
          secret_access_key: $${password}
          bucket_name: "mimir-${ARGOCD_ENV_dns_hyphenated_subdomain}"
          endpoint: ${ARGOCD_ENV_object_storage_regional_host}
          insecure: ${ARGOCD_ENV_object_store_insecure_connection}
          bucket_lookup_type: ${ARGOCD_ENV_bucket_lookup_type}
          region: ${ARGOCD_ENV_cloud_region}
    alertmanager_storage:
      storage_prefix: alertmanager
    ruler_storage:
      storage_prefix: ruler
    memberlist:
      advertise_port: ${ARGOCD_ENV_mimir_gossip_ring_port}
      bind_port: ${ARGOCD_ENV_mimir_gossip_ring_port} # use custom memberlist.bind_port to keep loki and mimir rings separate
  gossipRing:
    service:
      ports:
        http: ${ARGOCD_ENV_mimir_gossip_ring_port}
  containerPorts:
    gossipRing: ${ARGOCD_ENV_mimir_gossip_ring_port}
metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    jobLabel: 'app.kubernetes.io/component'
    relabelings:
    - sourceLabels: [namespace,job]
      separator: /
      regex: (.*)
      targetLabel: job
      replacement: $${1}
      action: replace


distributor:
  replicaCount: ${ARGOCD_ENV_mimir_distributor_replica_count}
  resources:
    requests:
      cpu: ${ARGOCD_ENV_mimir_distributor_requests_cpu}
      memory: ${ARGOCD_ENV_mimir_distributor_requests_memory}
    limits:
      cpu: ${ARGOCD_ENV_mimir_distributor_limits_cpu}
      memory: ${ARGOCD_ENV_mimir_distributor_limits_memory}

ingester:
  replicaCount: ${ARGOCD_ENV_mimir_ingester_replica_count}
  resources:
    requests:
      cpu: ${ARGOCD_ENV_mimir_ingester_requests_cpu}
      memory: ${ARGOCD_ENV_mimir_ingester_requests_memory}
    limits:
      cpu: ${ARGOCD_ENV_mimir_ingester_limits_cpu}
      memory: ${ARGOCD_ENV_mimir_ingester_limits_memory}
  extraEnvVarsSecret: "mimir-${ARGOCD_ENV_dns_hyphenated_subdomain}"
  persistence:
    size: ${ARGOCD_ENV_mimir_ingester_storage_size}

querier:
  replicaCount: ${ARGOCD_ENV_mimir_querier_replica_count}
  resources:
    limits:
      cpu: ${ARGOCD_ENV_mimir_querier_limits_cpu}
      memory: ${ARGOCD_ENV_mimir_querier_limits_memory}
  extraEnvVarsSecret: "mimir-${ARGOCD_ENV_dns_hyphenated_subdomain}"

queryFrontend:
  replicaCount: ${ARGOCD_ENV_mimir_query_frontend_replica_count}
  resources:
    limits:
      cpu: ${ARGOCD_ENV_mimir_query_frontend_limits_cpu}
      memory: ${ARGOCD_ENV_mimir_query_frontend_limits_memory}

compactor:
  replicaCount: ${ARGOCD_ENV_mimir_compactor_replica_count}
  extraEnvVarsSecret: "mimir-${ARGOCD_ENV_dns_hyphenated_subdomain}"
  resources:
    limits:
      cpu: ${ARGOCD_ENV_mimir_compactor_limits_cpu}
      memory: ${ARGOCD_ENV_mimir_compactor_limits_memory}
  persistence:
    size: ${ARGOCD_ENV_mimir_compactor_storage_size}

storeGateway:
  replicaCount: ${ARGOCD_ENV_mimir_store_gateway_replica_count}
  resources:
    limits:
      cpu: ${ARGOCD_ENV_mimir_store_gateway_limits_cpu}
      memory: ${ARGOCD_ENV_mimir_store_gateway_limits_memory}
  extraEnvVarsSecret: "mimir-${ARGOCD_ENV_dns_hyphenated_subdomain}"
  persistence:
    size: ${ARGOCD_ENV_mimir_store_gateway_storage_size}

ruler:
  enabled: true
  replicaCount: ${ARGOCD_ENV_mimir_ruler_replica_count}
  resources:
    limits:
      cpu: ${ARGOCD_ENV_mimir_ruler_limits_cpu}
      memory: ${ARGOCD_ENV_mimir_ruler_limits_memory}
  extraEnvVarsSecret: "mimir-${ARGOCD_ENV_dns_hyphenated_subdomain}"

alertmanager:
  enabled: true
  replicaCount: ${ARGOCD_ENV_mimir_alertmanager_replica_count}
  resources:
    limits:
      cpu: ${ARGOCD_ENV_mimir_alertmanager_limits_cpu}
      memory: ${ARGOCD_ENV_mimir_alertmanager_limits_memory}
  extraEnvVarsSecret: "mimir-${ARGOCD_ENV_dns_hyphenated_subdomain}"
  persistence:
    size: ${ARGOCD_ENV_mimir_alertmanager_storage_size}