---
apiVersion: tf.upbound.io/v1beta1
kind: Workspace
metadata:
  name: ${ARGOCD_ENV_deploy_env_onboard_app_name}
  namespace: ${ARGOCD_ENV_deploy_env_onboard_app_namespace}
spec:
  forProvider:
    # Use any module source supported by terraform init -from-module.
    source: Remote
    module: git::https://github.com/mojaloop/iac-modules.git//terraform/config-params/ccnew-config/env-onboard-config?ref=${ARGOCD_ENV_deploy_env_onboard_terraform_modules_tag}
    env:
      - name: TF_VAR_zitadel_admin_human_user_id
        secretKeyRef:
          namespace: ${ARGOCD_ENV_zitadel_namespace}
          name: ${ARGOCD_ENV_zitadel_post_config_output_secret}
          key: zitadel_admin_human_user_id
      - name: TF_CLI_CONFIG_FILE
        value: ./.terraformrc
    vars:
      - key: vault_fqdn
        value: "vault.${ARGOCD_ENV_vault_domain}.${ARGOCD_ENV_domain}"
      - key: argocd_fqdn
        value: "argocd.${ARGOCD_ENV_argocd_domain}.${ARGOCD_ENV_domain}"
      - key: grafana_fqdn
        value: "grafana.${ARGOCD_ENV_grafana_domain}.${ARGOCD_ENV_domain}"
      - key: env_name
        value: "${ARGOCD_ENV_env_name}"
      - key: env_cidr
        value: "${ARGOCD_ENV_env_cidr}"
      - key: kv_path
        value: "${ARGOCD_ENV_vault_kv_secret}"
      - key: netbird_user_rbac_group
        value: ${ARGOCD_ENV_netbird_user_rbac_group}
      - key: netbird_admin_rbac_group
        value: ${ARGOCD_ENV_netbird_admin_rbac_group}
      - key: zitadel_fqdn
        value: "${ARGOCD_ENV_zitadel_fqdn}"
      - key: "vault_admin_rbac_group"
        value: "${ARGOCD_ENV_vault_admin_rbac_group}"
      - key: "grafana_admin_rbac_group"
        value: "${ARGOCD_ENV_grafana_admin_rbac_group}"
      - key: "argocd_admin_rbac_group"
        value: "${ARGOCD_ENV_argocd_admin_rbac_group}"
      - key: "vault_user_rbac_group"
        value: "${ARGOCD_ENV_vault_user_rbac_group}"
      - key: "grafana_user_rbac_group"
        value: "${ARGOCD_ENV_grafana_user_rbac_group}"
      - key: "argocd_user_rbac_group"
        value: "${ARGOCD_ENV_argocd_user_rbac_group}"
      - key: "gitlab_namespace"
        value: "${ARGOCD_ENV_gitlab_namespace}"
      - key: "k8s_admin_rbac_group"
        value: "${ARGOCD_ENV_k8s_admin_rbac_group}"
      - key: "k8s_user_rbac_group"
        value: "${ARGOCD_ENV_k8s_user_rbac_group}"
      - key: managed_services_env_cidr
        value: "${ARGOCD_ENV_managed_services_env_cidr}"
      - key: managed_svc_enabled
        value: "${ARGOCD_ENV_managed_svc_enabled}"
      - key: "k8s_cluster_type"
        value: "${ARGOCD_ENV_k8s_cluster_type}"
      - key: cc_cluster_name
        value: ${ARGOCD_ENV_cluster_name}                        

  # All Terraform outputs are written to the connection secret.
  providerConfigRef:
    name: ${ARGOCD_ENV_deploy_env_onboard_app_name}
  writeConnectionSecretToRef:
    namespace: ${ARGOCD_ENV_deploy_env_onboard_app_namespace}
    name: ${ARGOCD_ENV_deploy_env_onboard_app_name}-secret
---
apiVersion: tf.upbound.io/v1beta1
kind: ProviderConfig
metadata:
  name: ${ARGOCD_ENV_deploy_env_onboard_app_name}
  namespace: ${ARGOCD_ENV_deploy_env_onboard_app_namespace}
spec:
  # Note that unlike most provider configs this one supports an array of
  # credentials. This is because each Terraform workspace uses a single
  # Crossplane provider config, but could use multiple Terraform providers each
  # with their own credentials.
  credentials:
    - filename: .terraformrc
      source: Secret
      secretRef:
        namespace: ${ARGOCD_ENV_argocd_namespace}
        name: terraformrc
        key: .terraformrc

    - filename: zitadel-admin-sa.json
      source: Secret
      secretRef:
        namespace: ${ARGOCD_ENV_zitadel_namespace}
        name: zitadel-admin-sa
        key: zitadel-admin-sa.json

    - filename: terraform.tfvars.json
      source: Secret
      secretRef:
        namespace: ${ARGOCD_ENV_gitlab_namespace}
        name: root-token-secret
        key: token.json

    - filename: vault-keys.json
      source: Secret
      secretRef:
        namespace: ${ARGOCD_ENV_vault_namespace}
        name: ${ARGOCD_ENV_vault_keys_secret}
        key: vault-keys.json

    - filename: netbird-oauth.json
      source: Secret
      secretRef:
        namespace: ${ARGOCD_ENV_netbird_namespace}
        name: netbird-ansible-secret-vars
        key: netbird-oauth.json

  # This optional configuration block can be used to inject HCL into any
  # workspace that uses this provider config, for example to setup Terraform
  # providers.
  configuration: |
    terraform { 
        backend "kubernetes" {
          secret_suffix     = "providerconfig-deploy-env-onboard"
          namespace         = "${ARGOCD_ENV_deploy_env_onboard_app_namespace}"
          in_cluster_config = true
        }
        
        required_providers {
          gitlab = {
            source = "gitlabhq/gitlab"
            version = "~> 16.0"
          }        

          zitadel = {
            source = "zitadel/zitadel"
            version = "${ARGOCD_ENV_zitadel_tf_provider_version}"
          }

          vault = "${ARGOCD_ENV_vault_tf_provider_version}"

          netbird = {
            source = "github.com/netbirdio/netbird"
            version = "${ARGOCD_ENV_netbird_tf_provider_version}"
          }
          kubernetes = {
            source = "hashicorp/kubernetes"
            version = "2.31.0"
          }
          time = {
            source = "hashicorp/time"
            version = "0.12.1"
          }          
        }
     }

      variable "token" {
        type = string
      }    

      provider "zitadel" {
          domain = "${ARGOCD_ENV_zitadel_fqdn}"
          jwt_profile_file = "$${path.module}/zitadel-admin-sa.json"
      }      
      
      provider "vault" {
        address = "http://vault-active.${ARGOCD_ENV_vault_namespace}.svc.cluster.local:8200"
        token   = jsondecode(file("$${path.module}/vault-keys.json")).root_token 
      }

      provider "kubernetes" {}

      provider "netbird" {
        server_url        = "https://${ARGOCD_ENV_netbird_fqdn}:443"
        oauth_credentials = "$${path.module}/netbird-oauth.json"
        oauth_issuer      = "https://${ARGOCD_ENV_zitadel_fqdn}/oauth/v2/token"
      }

      provider "gitlab" {
        token = var.token
        base_url = "https://${ARGOCD_ENV_gitlab_fqdn}"
      }

      provider "time" {}
---
apiVersion: apiextensions.crossplane.io/v1alpha1
kind: Usage
metadata:
  name: ${ARGOCD_ENV_deploy_env_onboard_app_name}
  namespace: ${ARGOCD_ENV_deploy_env_onboard_app_namespace}
spec:
  of:
    apiVersion: tf.upbound.io/v1beta1
    kind: ProviderConfig
    resourceRef:
      name: ${ARGOCD_ENV_deploy_env_onboard_app_name}
  by:
    apiVersion: tf.upbound.io/v1beta1
    kind: Workspace
    resourceRef:
      name: ${ARGOCD_ENV_deploy_env_onboard_app_name}