apiVersion: v1
kind: ServiceAccount
metadata:
  name: ca-bundle-sa
  namespace: ${ARGOCD_ENV_zitadel_namespace}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ${ARGOCD_ENV_zitadel_namespace}
  name: secret-manager
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "list", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-manager-binding
  namespace: ${ARGOCD_ENV_zitadel_namespace}
subjects:
- kind: ServiceAccount
  name: ca-bundle-sa
  namespace: ${ARGOCD_ENV_zitadel_namespace}
roleRef:
  kind: Role
  name: secret-manager
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: download-rds-ca-bundle
  namespace: ${ARGOCD_ENV_zitadel_namespace}
spec:
  template:
    spec:
      serviceAccountName: ca-bundle-sa
      containers:
      - name: downloader
        image: curlimages/curl
        command: 
          - "sh"
          - "-c"
          - "curl -o /tmp/rds-ca-bundle.pem https://s3.amazonaws.com/rds-downloads/rds-ca-2019-root.pem"
        volumeMounts:
          - name: ca-bundle
            mountPath: /tmp

      - name: kubectl
        image: bitnami/kubectl
        command:
          - "sh"
          - "-c"
          - "kubectl create secret generic rds-ca-bundle --from-file=/tmp/rds-ca-bundle.pem -n $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -"
        env:
        - name: NAMESPACE
          value: ${ARGOCD_ENV_zitadel_namespace}
        volumeMounts:
          - name: ca-bundle
            mountPath: /tmp

      restartPolicy: OnFailure
      volumes:
        - name: ca-bundle
          emptyDir: {}