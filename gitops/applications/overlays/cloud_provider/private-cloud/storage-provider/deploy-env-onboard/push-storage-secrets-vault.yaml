apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: "${ARGOCD_ENV_env_name}-rgw-admin-ops-user"
  namespace: "${ARGOCD_ENV_storage_namespace}"
spec:
  updatePolicy: Replace # IfNotExists
  deletionPolicy: Delete
  refreshInterval: 1m
  secretStoreRefs:
    - name: vault-secret-store
      kind: ClusterSecretStore
  selector:
    secret:
      name: rgw-admin-ops-user
  data:
    - match:
        remoteRef:
          remoteKey: "${ARGOCD_ENV_env_name}/rgw_admin_ops_user"

---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: "${ARGOCD_ENV_env_name}-rook-csi-rbd-node"
  namespace: "${ARGOCD_ENV_storage_namespace}"
spec:
  updatePolicy: Replace
  deletionPolicy: Delete
  refreshInterval: 1m
  secretStoreRefs:
    - name: vault-secret-store
      kind: ClusterSecretStore
  selector:
    secret:
      name: rook-csi-rbd-node
  data:
    - match:
        remoteRef:
          remoteKey: "${ARGOCD_ENV_env_name}/rook_csi_rbd_node"
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: "${ARGOCD_ENV_env_name}-rook-csi-rbd-provisioner"
  namespace: "${ARGOCD_ENV_storage_namespace}"
spec:
  updatePolicy: Replace
  deletionPolicy: Delete
  refreshInterval: 1m
  secretStoreRefs:
    - name: vault-secret-store
      kind: ClusterSecretStore
  selector:
    secret:
      name: rook-csi-rbd-provisioner
  data:
    - match:
        remoteRef:
          remoteKey: "${ARGOCD_ENV_env_name}/rook_csi_rbd_provisioner"
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: "${ARGOCD_ENV_env_name}-rook-csi-cephfs-node"
  namespace: "${ARGOCD_ENV_storage_namespace}"
spec:
  updatePolicy: Replace
  deletionPolicy: Delete
  refreshInterval: 1m
  secretStoreRefs:
    - name: vault-secret-store
      kind: ClusterSecretStore
  selector:
    secret:
      name: rook-csi-cephfs-node
  data:
    - match:
        remoteRef:
          remoteKey: "${ARGOCD_ENV_env_name}/rook_csi_cephfs_node"
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: "${ARGOCD_ENV_env_name}-rook-csi-cephfs-provisioner"
  namespace: "${ARGOCD_ENV_storage_namespace}"
spec:
  updatePolicy: Replace
  deletionPolicy: Delete
  refreshInterval: 1m
  secretStoreRefs:
    - name: vault-secret-store
      kind: ClusterSecretStore
  selector:
    secret:
      name: rook-csi-cephfs-provisioner
  data:
    - match:
        remoteRef:
          remoteKey: "${ARGOCD_ENV_env_name}/rook_csi_cephfs_provisioner"
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: "${ARGOCD_ENV_env_name}-rook-ceph-mon"
  namespace: "${ARGOCD_ENV_storage_namespace}"
spec:
  updatePolicy: Replace
  deletionPolicy: Delete
  refreshInterval: 1m
  secretStoreRefs:
    - name: vault-secret-store
      kind: ClusterSecretStore
  selector:
    secret:
      name: rook-ceph-mon
  data:
    - match:
        secretKey: admin-secret
        remoteRef:
          remoteKey: "${ARGOCD_ENV_env_name}/rook_ceph_mon"
          property: admin_secret
    - match:
        secretKey: ceph-secret
        remoteRef:
          remoteKey: "${ARGOCD_ENV_env_name}/rook_ceph_mon"
          property: ceph_secret
    - match:
        secretKey: ceph-username
        remoteRef:
          remoteKey: "${ARGOCD_ENV_env_name}/rook_ceph_mon"
          property: ceph_username
    - match:
        secretKey: cluster-name
        remoteRef:
          remoteKey: "${ARGOCD_ENV_env_name}/rook_ceph_mon"
          property: cluster_name
    - match:
        secretKey: fsid
        remoteRef:
          remoteKey: "${ARGOCD_ENV_env_name}/rook_ceph_mon"
          property: fsid
    - match:
        secretKey: mon-secret
        remoteRef:
          remoteKey: "${ARGOCD_ENV_env_name}/rook_ceph_mon"
          property: mon_secret
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: "${ARGOCD_ENV_env_name}-rook-ceph-rgw-endpoint"
  namespace: "${ARGOCD_ENV_storage_namespace}"
spec:
  updatePolicy: Replace
  deletionPolicy: Delete
  refreshInterval: 1m
  secretStoreRefs:
    - name: vault-secret-store
      kind: ClusterSecretStore
  selector:
    secret:
      name: rook-ceph-rgw-endpoint
  data:
    - match:
        remoteRef:
          remoteKey: "${ARGOCD_ENV_env_name}/rook_ceph_rgw_endpoint"
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: "${ARGOCD_ENV_env_name}-rook-ceph-mon-data"
  namespace: "${ARGOCD_ENV_storage_namespace}"
spec:
  updatePolicy: Replace
  deletionPolicy: Delete
  refreshInterval: 1m
  secretStoreRefs:
    - name: vault-secret-store
      kind: ClusterSecretStore
  selector:
    secret:
      name: rook-ceph-mon-data
  data:
    - match:
        remoteRef:
          remoteKey: "${ARGOCD_ENV_env_name}/rook_ceph_mon_data"