apiVersion: v1
kind: ServiceAccount
metadata:
  name: storage-secrets
  namespace: ${ARGOCD_ENV_storage_namespace}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ${ARGOCD_ENV_storage_namespace}
  name: storage-secrets-role
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - authorization.k8s.io
    resources:
      - selfsubjectrulesreviews
    verbs:
      - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: storage-secrets-role-binding
  namespace: ${ARGOCD_ENV_storage_namespace}
subjects:
  - kind: ServiceAccount
    name: storage-secrets
    namespace: ${ARGOCD_ENV_storage_namespace}
roleRef:
  kind: Role
  name: storage-secrets-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: storage-secrets-store
  namespace: ${ARGOCD_ENV_storage_namespace}
spec:
  provider:
    kubernetes:
      auth:
        serviceAccount:
          name: storage-secrets
      remoteNamespace: ${ARGOCD_ENV_storage_namespace}
      server:
        caProvider:
          type: ConfigMap
          name: kube-root-ca.crt
          key: ca.crt
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: rook-csi-rbd-node
  namespace: ${ARGOCD_ENV_storage_namespace}
spec:
  refreshInterval: 1m
  secretStoreRef:
    kind: SecretStore
    name: storage-secrets-store
  target:
    name:  rook-csi-rbd-node
    template:
      type: kubernetes.io/rook
      data:
        userID: "{{ .CSI_RBD_NODE_SECRET_NAME }}"
        userKey: "{{ .CSI_RBD_NODE_SECRET }}"
  data:
    - secretKey: CSI_RBD_NODE_SECRET_NAME
      remoteRef:
        key: rook-external-config
        property: CSI_RBD_NODE_SECRET_NAME
    - secretKey: CSI_RBD_NODE_SECRET
      remoteRef:
        key: rook-external-config
        property: CSI_RBD_NODE_SECRET
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: rook-csi-rbd-provisioner
  namespace: ${ARGOCD_ENV_storage_namespace}
spec:
  refreshInterval: 1m
  secretStoreRef:
    kind: SecretStore
    name: storage-secrets-store
  target:
    name:  rook-csi-rbd-provisioner
    template:
      type: kubernetes.io/rook
      data:
        userID: "{{ .CSI_RBD_PROVISIONER_SECRET_NAME }}"
        userKey: "{{ .CSI_RBD_PROVISIONER_SECRET }}"
  data:
    - secretKey: CSI_RBD_PROVISIONER_SECRET_NAME
      remoteRef:
        key: rook-external-config
        property: CSI_RBD_PROVISIONER_SECRET_NAME
    - secretKey: CSI_RBD_PROVISIONER_SECRET
      remoteRef:
        key: rook-external-config
        property: CSI_RBD_PROVISIONER_SECRET
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: rook-csi-cephfs-node
  namespace: ${ARGOCD_ENV_storage_namespace}
spec:
  refreshInterval: 1m
  secretStoreRef:
    kind: SecretStore
    name: storage-secrets-store
  target:
    name:  rook-csi-cephfs-node
    template:
      type: kubernetes.io/rook
      data:
        adminID: "{{ .CSI_CEPHFS_NODE_SECRET_NAME }}"
        adminKey: "{{ .CSI_CEPHFS_NODE_SECRET }}"
  data:
    - secretKey: CSI_CEPHFS_NODE_SECRET_NAME
      remoteRef:
        key: rook-external-config
        property: CSI_CEPHFS_NODE_SECRET_NAME
    - secretKey: CSI_CEPHFS_NODE_SECRET
      remoteRef:
        key: rook-external-config
        property: CSI_CEPHFS_NODE_SECRET
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: rook-csi-cephfs-provisioner
  namespace: ${ARGOCD_ENV_storage_namespace}
spec:
  refreshInterval: 1m
  secretStoreRef:
    kind: SecretStore
    name: storage-secrets-store
  target:
    name:  rook-csi-cephfs-provisioner
    template:
      type: kubernetes.io/rook
      data:
        adminID: "{{ .CSI_CEPHFS_PROVISIONER_SECRET_NAME }}"
        adminKey: "{{ .CSI_CEPHFS_PROVISIONER_SECRET }}"
  data:
    - secretKey: CSI_CEPHFS_PROVISIONER_SECRET_NAME
      remoteRef:
        key: rook-external-config
        property: CSI_CEPHFS_PROVISIONER_SECRET_NAME
    - secretKey: CSI_CEPHFS_PROVISIONER_SECRET
      remoteRef:
        key: rook-external-config
        property: CSI_CEPHFS_PROVISIONER_SECRET
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: rgw-admin-ops-user
  namespace: ${ARGOCD_ENV_storage_namespace}
spec:
  refreshInterval: 1m
  secretStoreRef:
    kind: SecretStore
    name: storage-secrets-store
  target:
    name:  rgw-admin-ops-user
    template:
      type: kubernetes.io/rook
      data:
        accessKey: "{{ .RGW_ADMIN_OPS_USER_ACCESS_KEY }}"
        secretKey: "{{ .RGW_ADMIN_OPS_USER_SECRET_KEY }}"
  data:
    - secretKey: RGW_ADMIN_OPS_USER_ACCESS_KEY
      remoteRef:
        key: rook-external-config
        property: RGW_ADMIN_OPS_USER_ACCESS_KEY
    - secretKey: RGW_ADMIN_OPS_USER_SECRET_KEY
      remoteRef:
        key: rook-external-config
        property: RGW_ADMIN_OPS_USER_SECRET_KEY
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: rook-ceph-mon
  namespace: ${ARGOCD_ENV_storage_namespace}
spec:
  refreshInterval: 1m
  secretStoreRef:
    kind: SecretStore
    name: storage-secrets-store
  target:
    name:  rook-ceph-mon
    template:
      type: kubernetes.io/rook
      data:
        cluster-name: "rook-ceph"
        fsid: "{{ .ROOK_EXTERNAL_FSID }}"
        admin-secret: "admin-secret"
        mon-secret: "mon-secret"
        ceph-username: "{{ .ROOK_EXTERNAL_USERNAME }}"
        ceph-secret: "{{ .ROOK_EXTERNAL_USER_SECRET }}"
  data:
    - secretKey: ROOK_EXTERNAL_FSID
      remoteRef:
        key: rook-external-config
        property: ROOK_EXTERNAL_FSID
    - secretKey: ROOK_EXTERNAL_USERNAME
      remoteRef:
        key: rook-external-config
        property: ROOK_EXTERNAL_USERNAME
    - secretKey: ROOK_EXTERNAL_USER_SECRET
      remoteRef:
        key: rook-external-config
        property: ROOK_EXTERNAL_USER_SECRET
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: rook-ceph-rgw-endpoint
  namespace: ${ARGOCD_ENV_storage_namespace}
spec:
  refreshInterval: 1m
  secretStoreRef:
    kind: SecretStore
    name: storage-secrets-store
  target:
    name: rook-ceph-rgw-endpoint
    template:
      type: kubernetes.io/rook
      data:
        rgw-endpoint: "{{ .RGW_ENDPOINT }}"
  data:
    - secretKey: RGW_ENDPOINT
      remoteRef:
        key: rook-external-config
        property: RGW_ENDPOINT
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: rook-ceph-mon-data
  namespace: ${ARGOCD_ENV_storage_namespace}
spec:
  refreshInterval: 1m
  secretStoreRef:
    kind: SecretStore
    name: storage-secrets-store
  target:
    name: rook-ceph-mon-data
    template:
      type: kubernetes.io/rook
      data:
        mon-data: "{{ .ROOK_EXTERNAL_CEPH_MON_DATA }}"
  data:
    - secretKey: ROOK_EXTERNAL_CEPH_MON_DATA
      remoteRef:
        key: rook-external-config
        property: ROOK_EXTERNAL_CEPH_MON_DATA
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: rook-ceph-cluster-user-command
  namespace: ${ARGOCD_ENV_storage_namespace}
spec:
  refreshInterval: 1m
  secretStoreRef:
    kind: SecretStore
    name: storage-secrets-store
  target:
    name: rook-ceph-cluster-user-command
    template:
      type: kubernetes.io/rook
      data:
        args: "{{ .ARGS }}"
  data:
    - secretKey: ARGS
      remoteRef:
        key: rook-external-config
        property: ARGS