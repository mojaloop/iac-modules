---
apiVersion: redhatcop.redhat.io/v1alpha1
kind: VaultSecret
metadata:
  name: ${ARGOCD_ENV_object_storage_secret_name}
  namespace: ${ARGOCD_ENV_vault_namespace}
spec:
  refreshThreshold: 90
  output:
    name: ${ARGOCD_ENV_object_storage_secret_name}
    stringData:
      AWS_SECRET_ACCESS_KEY: "{{ .creds.secret_key }}"
      AWS_ACCESS_KEY_ID: "{{ .creds.access_key }}"
      AWS_SESSION_TOKEN: "{{ .creds.security_token }}"

      "${ARGOCD_ENV_object_storage_secret_key}": |
        [default]
        aws_access_key_id = {{ .creds.access_key  | toString }}
        aws_secret_access_key = {{ .creds.secret_key  | toString }}
        aws_session_token = {{ .creds.security_token  | toString }}
        region = ${ARGOCD_ENV_object_storage_region}
    type: Opaque
    annotations:
      reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
      reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: "${ARGOCD_ENV_velero_namespace}"
      reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true" # Auto create reflection for matching namespaces
      reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: "${ARGOCD_ENV_velero_namespace}"
  vaultSecretDefinitions:
    - authentication:
        path: ${ARGOCD_ENV_vault_k8s_admin_auth_path}
        role: ${ARGOCD_ENV_vault_k8s_admin_role_name}
        serviceAccount:
          name: default
      name: creds
      path: "${ARGOCD_ENV_object_storage_backend_path}/creds/${ARGOCD_ENV_object_storage_access_role}"
      requestType: GET
---
apiVersion: v1
kind: Secret
metadata:
  name: ${ARGOCD_ENV_object_storage_secret_name}
  namespace: ${ARGOCD_ENV_velero_namespace}
  labels:
    reloader: enabled
  annotations:
    reflector.v1.k8s.emberstack.com/reflects: ${ARGOCD_ENV_vault_namespace}/${ARGOCD_ENV_object_storage_secret_name}
data:
  placeholder: none
