include:
  - template: Terraform/Base.gitlab-ci.yml # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Terraform/Base.latest.gitlab-ci.yml
workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
      changes:
        - .gitlab/ci/Dockerfile
      variables:
        IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
    - when: always
    # Apparently including the merged workflow rules in addition to the custom rule above doesn't work.
    # This comes from https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Workflows/MergeRequest-Pipelines.gitlab-ci.yml
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

stages:
  - prepare
  - lint
  - init
  - validate
  - build
  - deploy
  - deploy-cluster
  - refresh-templates
  - cleanup
  - auto-run
  - auto-run-tf

variables:
  IMAGE_TAG: latest
  #TF_STATE_BASE_ADDRESS: $CI_API_V4_URL/projects/$CI_PROJECT_ID/terraform/state
  SAST_DISABLED: "true"
  CONFIG_PATH: merged-config
  ANSIBLE_BASE_OUTPUT_DIR: $TF_ROOT/ansible
  GITOPS_BUILD_OUTPUT_DIR: $TF_ROOT/gitops
  TEMPLATE_REPO_URL: https://github.com/mojaloop/iac-modules.git
  CI_TEMPLATE_PATH: terraform/gitlab/ci-templates/k8s-cluster
  K8S_TEMPLATE_PATH: terraform/k8s
  TMP_TEMPLATES_DIR: /tmp/iac-templates
  TMP_GIT_REPO: /tmp/git-iac-templates
  GIT_SUBMODULE_STRATEGY: none
  IGNORE_TF_DEPRECATION_WARNING: true
  KUBE_IN_CLUSTER_CONFIG: true
  VAULT_ADDR: http://vault-active.vault.svc.cluster.local:8200

image: ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}

cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/**/.terraform
    - ${TF_ROOT}/**/.terraform.lock.hcl
    - ${TF_ROOT}/**/.terragrunt-cache
    - ${ANSIBLE_BASE_OUTPUT_DIR}/**/inventory
    - ${ANSIBLE_BASE_OUTPUT_DIR}/**/sshkey
    - ${ANSIBLE_BASE_OUTPUT_DIR}/**/kubeconfig
    - ${ANSIBLE_BASE_OUTPUT_DIR}/**/oidc-kubeconfig

.source:
  script:
    - export VAULT_TOKEN="$(vault write -field=token auth/${VAULT_AUTH_PATH}/login role=$VAULT_AUTH_ROLE jwt=$VAULT_ID_TOKEN)"
    - export GIT_CREDENTIALS="$(vault kv get -field=credentials ${KV_SECRET_PATH}/git)"
    - if [ "$GIT_CREDENTIALS" != "" ]; then echo "$GIT_CREDENTIALS" | tr ' ' '\n' > ~/.gitcredentials.store; fi
    - git config --global credential.helper 'store --file ~/.gitcredentials.store'
    - git submodule sync --recursive
    - git submodule update --init --recursive
    - source $(which gitlab-terraform)
    - .gitlab/scripts/config-merge.sh
    - yq eval '.' $CONFIG_PATH/cluster-config.yaml -o=json > cluster-config.json
    - yq eval '.' $CONFIG_PATH/addons-vars.yaml -o=json > addons-vars.yaml
    - for var in $(jq -r 'to_entries[] | "\(.key)=\(.value)\n"' ./cluster-config.json); do export $var; done
    - for var in $(jq -r 'to_entries[] | "\(.key)=\(.value)\n"' ./addons-vars.yaml); do export $var; done
    - if [ $migrate == "true" ]; then sh .gitlab/scripts/get-artifacts.sh; fi
    - export ENV_VAULT_TOKEN="$(vault kv get -field=value ${KV_SECRET_PATH}/${CI_PROJECT_NAME}/env_token)"
    - export $cloud_platform_client_secret_name="$(vault kv get -field=value ${KV_SECRET_PATH}/${CI_PROJECT_NAME}/cloud_platform_client_secret)"
    - export GITLAB_CI_PAT="$(vault kv get -field=value ${KV_SECRET_PATH}/gitlab/gitlab_ci_pat)"
    - export NETBIRD_GW_SETUP_KEY="$(vault kv get -field=value ${KV_SECRET_PATH}/${CI_PROJECT_NAME}/netbird_gw_setup_key)"
    - export NETBIRD_K8S_SETUP_KEY="$(vault kv get -field=value ${KV_SECRET_PATH}/${CI_PROJECT_NAME}/netbird_k8s_setup_key)"
    - export NETBIRD_MS_GW_SETUP_KEY="$(vault kv get -field=value ${KV_SECRET_PATH}/${CI_PROJECT_NAME}/netbird_ms_gw_setup_key)"
    - export KUBERNETES_OIDC_CLIENT_ID="$(vault kv get -field=value ${KV_SECRET_PATH}/${CI_PROJECT_NAME}/kubernetes_oidc_client_id)"
    - |
      export SUBMODULE_REVISIONS="$((echo "submodules:"; git submodule -q foreach 'echo "  "`git remote get-url origin`": {ref: "`git rev-parse HEAD`", path: "$sm_path"}"') | yq eval '.' -o=json - | tr -d '\n\t\r')"
    - source setcivars.sh
    - echo "https://${PRIVATE_REPO_USER}:${PRIVATE_REPO_TOKEN}@${PRIVATE_REPO}" >> ~/.gitcredentials.store
    - git config --global advice.detachedHead false
    - source set-ansible-destroy-preq-vars.sh
    - export TERRAGRUNT_EXCLUDE_DIR="/dev/null"
    - if [ "$managed_svc_enabled" == "false" ]; then export TERRAGRUNT_EXCLUDE_DIR="${TERRAGRUNT_EXCLUDE_DIR},${TF_ROOT}/managed-services,${TF_ROOT}/ansible-managed-svcs-deploy"; fi
    - if [ "$addons_module_enabled" == "false" ]; then export TERRAGRUNT_EXCLUDE_DIR="${TERRAGRUNT_EXCLUDE_DIR},$TF_ROOT/addons-gitops-build"; fi
    - set

prepare:image:
  needs: []
  stage: prepare
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  rules:
    # Tag with the commit SHA if we're in an MR
    - if: $CI_MERGE_REQUEST_IID
      changes:
        - .gitlab/ci/Dockerfile
      variables:
        DOCKER_TAG: $CI_COMMIT_REF_SLUG
    # If we're on our main branch, tag with "latest"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - .gitlab/ci/Dockerfile
      variables:
        DOCKER_TAG: latest
  before_script:
    # Authenticate to the docker registry and dependency proxy
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"},\"${PRIVATE_REPO}\":{\"auth\":\"$(printf "%s:%s" "${PRIVATE_REPO_USER}" "${PRIVATE_REPO_TOKEN}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/.gitlab/ci"
      --cache=true
      --dockerfile "${CI_PROJECT_DIR}/.gitlab/ci/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${DOCKER_TAG}"

fmt:
  extends: .terraform:fmt
  stage: lint
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
    - terragrunt hclfmt -check -diff
    - terragrunt run-all fmt -check -diff -recursive || true
  when: manual

init:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  stage: init
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
    - terragrunt run-all init -input=false -reconfigure
  artifacts:
    paths:
      - $CONFIG_PATH/*.yaml
      - $CONFIG_PATH/*.yml
      - $CONFIG_PATH/*.json

validate:
  extends: .terraform:validate
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
    - terragrunt run-all validate-inputs
    - terragrunt run-all validate
  when: manual

build:
  extends: .terraform:build
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
  when: manual

deploy-infra:
  extends: .terraform:deploy
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
    - terragrunt run-all apply --terragrunt-non-interactive -input=false
    - .gitlab/scripts/pushtorepo.sh $CI_PROJECT_PATH $CI_SERVER_HOST $CI_COMMIT_REF_NAME $GITOPS_BUILD_OUTPUT_DIR $GITLAB_CI_PAT $ARGO_CD_ROOT_APP_PATH
  artifacts:
    paths:
      - ${ANSIBLE_BASE_OUTPUT_DIR}/**/oidc-kubeconfig
      - ${ANSIBLE_BASE_OUTPUT_DIR}/**/sshkey
      - ${ANSIBLE_BASE_OUTPUT_DIR}/**/inventory
    when: always
  when: manual

deploy-managed-srvcs:
  extends: .terraform:deploy
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
    - cd managed-services
    - terragrunt run-all apply --terragrunt-non-interactive -input=false
  artifacts:
    paths:
      - ${ANSIBLE_BASE_OUTPUT_DIR}/**/oidc-kubeconfig
      - ${ANSIBLE_BASE_OUTPUT_DIR}/**/sshkey
      - ${ANSIBLE_BASE_OUTPUT_DIR}/**/inventory
    when: always
  when: manual

refresh-templates:
  stage: refresh-templates
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
    - .gitlab/scripts/refresh-repo.sh $cluster_name $TMP_GIT_REPO $TMP_TEMPLATES_DIR $GITLAB_CI_PAT $iac_terraform_modules_tag
  when: manual

destroy:
  extends: .terraform:destroy
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
    - if [ -d "$ANSIBLE_BASE_OUTPUT_DIR" ]; then echo "Inventory artifact exists"; else echo "Inventory artifact does not exist; Please rerun deploy-infra before destroy"; exit 1; fi
    - terragrunt run-all destroy --terragrunt-non-interactive -input=false
    - .gitlab/scripts/cleanapps.sh $CI_PROJECT_PATH $CI_SERVER_HOST $CI_COMMIT_REF_NAME $GITOPS_BUILD_OUTPUT_DIR $GITLAB_CI_PAT $ARGO_CD_ROOT_APP_PATH
  when: manual

apps:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH && $CI_COMMIT_BRANCH
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
    - terragrunt run-all apply --terragrunt-non-interactive -input=false
    - .gitlab/scripts/pushtorepo.sh $CI_PROJECT_PATH $CI_SERVER_HOST $CI_COMMIT_REF_NAME $GITOPS_BUILD_OUTPUT_DIR $GITLAB_CI_PAT $ARGO_CD_ROOT_APP_PATH

refresh-deploy-infra:
  extends: .terraform:deploy
  stage: auto-run
  needs:
    - init
  variables:
    GIT_DEPTH: 0
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
    - .gitlab/scripts/refresh-repo.sh $cluster_name $TMP_GIT_REPO $TMP_TEMPLATES_DIR $GITLAB_CI_PAT $iac_terraform_modules_tag
    - git checkout "$CI_COMMIT_REF_NAME" && git pull
    - !reference [.source, script]
    - terragrunt run-all apply --terragrunt-non-interactive -input=false
    - .gitlab/scripts/pushtorepo.sh $CI_PROJECT_PATH $CI_SERVER_HOST $CI_COMMIT_REF_NAME $GITOPS_BUILD_OUTPUT_DIR $GITLAB_CI_PAT $ARGO_CD_ROOT_APP_PATH
  artifacts:
    paths:
      - ${ANSIBLE_BASE_OUTPUT_DIR}/**/oidc-kubeconfig
      - ${ANSIBLE_BASE_OUTPUT_DIR}/**/sshkey
      - ${ANSIBLE_BASE_OUTPUT_DIR}/**/inventory
    when: always
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TITLE =~ /^deploy.*/
    - if: $CI_PIPELINE_TRIGGERED && $CI_PIPELINE_SOURCE == "trigger" && $CD_UPDATE_PROFILE
    - when: manual

tf-refresh-deploy-infra:
  extends: .terraform:deploy
  stage: auto-run-tf
  needs:
    - init
  variables:
    GIT_DEPTH: 0
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
    - terragrunt run-all apply --terragrunt-non-interactive -input=false
  artifacts:
    paths:
      - ${ANSIBLE_BASE_OUTPUT_DIR}/**/oidc-kubeconfig
      - ${ANSIBLE_BASE_OUTPUT_DIR}/**/sshkey
      - ${ANSIBLE_BASE_OUTPUT_DIR}/**/inventory
    when: always
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_TITLE =~ /^tf_trigger.*/
    - when: manual
