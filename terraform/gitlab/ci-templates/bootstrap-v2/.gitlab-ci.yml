include:
  - template: Terraform/Base.gitlab-ci.yml # https://gitlab.com/gitlab-org/gitlab/blob/master/lib/gitlab/ci/templates/Terraform/Base.latest.gitlab-ci.yml
workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
      changes:
        - .gitlab/ci/Dockerfile
      variables:
        IMAGE_TAG: ${CI_COMMIT_REF_SLUG}
    - when: always
    # Apparently including the merged workflow rules in addition to the custom rule above doesn't work.
    # This comes from https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Workflows/MergeRequest-Pipelines.gitlab-ci.yml
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

stages:
  - prepare
  - lint
  - init
  - validate
  - build
  - deploy
  - deploy-env-templates
  - refresh-templates
  - cleanup

variables:
  IMAGE_TAG: latest
  TEMPLATE_REPO_URL: https://github.com/mojaloop/iac-modules.git
  CI_TEMPLATE_PATH: terraform/gitlab/ci-templates/k8s-cluster
  K8S_TEMPLATE_PATH: terraform/k8s
  TMP_TEMPLATES_DIR: /tmp/iac-templates
  TMP_GIT_REPO: /tmp/git-iac-templates
  ANSIBLE_BASE_OUTPUT_DIR: $TF_ROOT/ansible
  CC_CI_TEMPLATE_PATH: terraform/gitlab/ci-templates/bootstrap-v2
  CC_TEMPLATE_PATH: terraform/ccnew
  CC_TMP_GIT_REPO: /tmp/git-cc-iac-templates
  CC_TMP_TEMPLATES_DIR: /tmp/cc-iac-templates
  KUBE_IN_CLUSTER_CONFIG: true
  PIPELINE_EXECUTOR: true
  IGNORE_TF_DEPRECATION_WARNING: true
  VAULT_ADDR: http://vault-active.vault.svc.cluster.local:8200

image: ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}

cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/**/.terraform
    - ${TF_ROOT}/**/.terraform.lock.hcl
    - ${TF_ROOT}/**/.terragrunt-cache
    - ${ANSIBLE_BASE_OUTPUT_DIR}/**/inventory
    - ${ANSIBLE_BASE_OUTPUT_DIR}/**/sshkey

.source:
  script:
    - source $(which gitlab-terraform)
    - source scripts/setlocalvars.sh
    - export VAULT_TOKEN="$(vault write -field=token auth/${VAULT_AUTH_PATH}/login role=$VAULT_AUTH_ROLE jwt=$VAULT_ID_TOKEN)"
    - export CLOUD_PLATFORM_API_CLIENT_ID="$(vault kv get -field=cloud_platform_api_client_id -mount=secret cloud-api-access)"
    - export CLOUD_PLATFORM_API_CLIENT_SECRET="$(vault kv get -field=cloud_platform_api_client_secret -mount=secret cloud-api-access)"
    - export PRIVATE_REPO_TOKEN="$(vault kv get -field=token -mount=secret ${PRIVATE_REPO_TOKEN_PATH})"
    - export GITLAB_SEED_TOKEN="$(vault kv get -field=value secret/gitlab/gitlab_ci_pat)"
    - source .gitlab/scripts/${cloud_platform}-source-env-vars.sh
    - if [ "$PRIVATE_REPO_USER" == "nullvalue" ]; then echo "https://${PRIVATE_REPO_USER}:${PRIVATE_REPO_TOKEN}@${PRIVATE_REPO}" > ~/.gitcredentials.store; fi
    - if [ "$PRIVATE_REPO_USER" == "nullvalue" ]; then git config --global credential.helper 'store --file ~/.gitcredentials.store'; fi
    - git config --global advice.detachedHead false
    - mkdir -p $TMP_GIT_REPO
    - git clone ${TEMPLATE_REPO_URL} $TMP_GIT_REPO
    - set

prepare:image:
  needs: []
  stage: prepare
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  rules:
    # Tag with the commit SHA if we're in an MR
    - if: $CI_MERGE_REQUEST_IID
      changes:
        - .gitlab/ci/Dockerfile
      variables:
        DOCKER_TAG: $CI_COMMIT_REF_SLUG
    # If we're on our main branch, tag with "latest"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - .gitlab/ci/Dockerfile
      variables:
        DOCKER_TAG: latest
  before_script:
    # Authenticate to the docker registry and dependency proxy
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"},\"${PRIVATE_REPO}\":{\"auth\":\"$(printf "%s:%s" "${PRIVATE_REPO_USER}" "${PRIVATE_REPO_TOKEN}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/.gitlab/ci"
      --cache=true
      --dockerfile "${CI_PROJECT_DIR}/.gitlab/ci/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${DOCKER_TAG}"

fmt:
  extends: .terraform:fmt
  stage: lint
  script:
    - !reference [.source, script]
    - terragrunt hclfmt -check -diff
    - terragrunt run-all fmt -check -diff -recursive || true
  when: manual

init:
  stage: init
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
    # We need to reconfigure the initialized cache
    - terragrunt run-all init -upgrade -input=false -reconfigure

validate:
  extends: .terraform:validate
  script:
    - !reference [.source, script]
    - terragrunt run-all validate-inputs
    - terragrunt run-all validate
  when: manual

build:
  extends: .terraform:build
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
    - terragrunt run-all plan --terragrunt-non-interactive -input=false
  when: manual

deploy:
  extends: .terraform:deploy
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
    - terragrunt run-all apply --terragrunt-non-interactive -input=false
  artifacts:
    paths:
      - ${ANSIBLE_BASE_OUTPUT_DIR}/**/sshkey
      - ${ANSIBLE_BASE_OUTPUT_DIR}/**/inventory
    when: always
  when: manual

deploy-env-templates:
  stage: deploy-env-templates
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
    - .gitlab/scripts/seedenvproject.sh $ENV_TO_UPDATE $TMP_GIT_REPO $TMP_TEMPLATES_DIR ${GITLAB_SEED_TOKEN} $IAC_MODULES_VERSION_TO_UPDATE
  when: manual

refresh-templates:
  stage: refresh-templates
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
    - .gitlab/scripts/refresh-templates.sh  $CC_TMP_GIT_REPO $CC_TMP_TEMPLATES_DIR $GITLAB_SEED_TOKEN $iac_terraform_modules_tag
  when: manual

#do nothing for now
destroy:
  extends: .terraform:destroy
  id_tokens:
    VAULT_ID_TOKEN:
      aud: https://$VAULT_FQDN
  script:
    - !reference [.source, script]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  when: manual
